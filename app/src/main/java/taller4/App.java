/*
 * This source file was generated by the Gradle 'init' task
 */
package taller4;
import java.util.Random;

public class App {

     public static void main(String[] args) {
        try {
            System.out.println(obtenerNumerosImpares(200));
            System.out.println(obtenerFibonacci(10));
            int cantidad = new Random().nextInt(11) + 20;
            for (int i = 0; i < cantidad; i++) {
                System.out.println(calcularRaizCuadradaAleatoria());
            }
            System.out.println(contarNumerosPares(1, 5));
            System.out.println(sumarNumerosAleatorios(10));
            simularSorteo();
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
     /* TODAS LAS FUNCIONES DEBEN LLEVAR CONTROL DE ERRORES, SI EL ENUNCIADO NO LO ESPECIFICA, LO DEBES PONER
     * DE ACUERDO CON TU CRITERIO
     */
    /* 
     * 1.	Escriba una función que reciba un entero positivo entre 100 y 500 y retorne en un texto todos los números impares desde 1 
     * hasta ese número separados por comas en grupos de hasta 8 números.
     * 
    */

    public static String obtenerNumerosImpares(int numero) {
        try {
            final int MIN_VALUE = 100;
            final int MAX_VALUE = 500;
            if (numero < MIN_VALUE || numero > MAX_VALUE) {
                return "El número debe estar entre " + MIN_VALUE + " y " + MAX_VALUE + ".";
            }

            String resultado = "";
            int contador = 0;

            for (int i = 1; i <= numero; i += 2) {
                resultado += i;
                contador++;
                if (contador % 8 == 0 && i + 2 <= numero) {
                    resultado += ", ";
                } else if (i + 2 <= numero) {
                    resultado += ", ";
                }
            }

            return resultado;
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }
    /* 2. 	Escriba una función que reciba un entero N mayor de 2  y retorne un string cono esos N términos de la 
    serie de Fibonacci (La sucesión de Fibonacci se trata de una serie infinita de números naturales que empieza con un 0 y un 1 
    y continúa añadiendo números que son la suma de los dos anteriores: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 
    987, 1597…)
     * 
     * 
    */

    public static String obtenerFibonacci(int n) {
        try {
            final int MIN_VALUE = 3;
            if (n <= MIN_VALUE) {
                return "N debe ser mayor que " + MIN_VALUE + ".";
            }

            String resultado = "";
            int a = 0, b = 1;

            for (int i = 0; i < n; i++) {
                resultado += a;
                if (i < n - 1) {
                    resultado += ", ";
                }
                int temp = a;
                a = b;
                b = temp + b;
            }

            return resultado;
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }
    /* 
     * 3.	Diseñar y desarrollar una función que NO reciba datos de entrada, genere aleatoriamente un número entre 2 y 355, 
       le calcule su raíz cuadrada y retorne este valor. Para calcular las raíces usar la función Sqrt de la biblioteca Math.
       En el main, antes de invocar la función, se debe calcular un aleatorio entre 20 y 30 el cual establecerá la cantidad 
       de veces que va a llamar a la función y en un ciclo, mostrar los resultados.
    */

    public static double calcularRaizCuadradaAleatoria() {
        try {
            final int MIN_VALUE = 2;
            final int MAX_VALUE = 355;
            Random random = new Random();
            int numeroAleatorio = random.nextInt(MAX_VALUE - MIN_VALUE + 1) + MIN_VALUE; 
            return Math.sqrt(numeroAleatorio);
        } catch (Exception e) {
            return -1;
        }
    }
   




    /*4.	Diseñar y desarrollar una función que reciba un valor inicial y un valor final, para generar 900 números aleatorios 
        en este rango y retorne un texto que diga cuántos números pares fueron generados. Controle que el nro inicial sea menor que 
        nro final para establecer el rango.
        Llame la función desde el main e imprimir el resultado arrojado.
    */
    public static String contarNumerosPares(int inicio, int fin) {
        try {
            if (inicio >= fin) {
                return "El número inicial debe ser menor que el número final.";
            }

            Random random = new Random();
            int contadorPares = 0;

            for (int i = 0; i < 900; i++) {
                int numeroAleatorio = random.nextInt(fin - inicio + 1) + inicio;
                if (numeroAleatorio % 2 == 0) {
                    contadorPares++;
                }
            }

            return "Se generaron " + contadorPares + " números pares.";
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }

    

    
    /* 5.	Diseñar y desarrollar una función que calcule una cantidad de números aleatorios que viene como parámetro de entrada 
        y los sume.  La función deberá retornar el total de la suma. Usted defina los rangos que va a usar en el cálculo.
        Llame la función desde el main e imprimir el resultado arrojado.
      
    */

    public static int sumarNumerosAleatorios(int cantidad) {
        try {
            Random random = new Random();
            int suma = 0;

            for (int i = 0; i < cantidad; i++) {
                suma += random.nextInt(100); 
            }

            return suma;
        } catch (Exception e) {
            return -1;
        }
    }



    /* 6.	Se requiere una función para simular el sorteo de una lotería, de acuerdo con las siguientes condiciones:
            La lotería tiene 20 premios. 
            Cada premio que calcula el programa debe tener el número de 4 cifras entre 0000 y 9999 acompañado de la serie 
            que es un número entre 100 y 150.
            Ejemplo: 5698-101
            Cada premio lo debe imprimir el programa de la siguiente forma (n representa un número cualquiera):
            Sorteo # nn - Número Premiado nnnn - Serie nnn
            Ejm: Sorteo # 19  - Número Premiado 5698 - Serie 101
            Para tener en cuenta la forma en la cual se informan los 20 resultados: 
            Del premio 20 al 6 el programa imprime: 
            ======PREMIOS MENORES=======
            y la lista de los 15 premios 
            Del premio 5 al 2 el programa imprime:
            ======PREMIOS SECOS=========
            y la lista de los 4 premios secos
            AL llegar al premio 1, el programa imprime:
            ======Premio mayor==========
            Y el premio mayor*/

public static void simularSorteo() {

    try {

        Random random = new Random();

    System.out.println("======PREMIOS MENORES=======");
    
    for (int i = 20; i >= 6; i--) {
        int numeroPremiado = random.nextInt(10000); // Número entre 0000 y 9999
        int serie = random.nextInt(51) + 100; // Serie entre 100 y 150
        System.out.printf("Sorteo # %d - Número Premiado %04d - Serie %d%n", i, numeroPremiado, serie);
    }

    System.out.println("======PREMIOS SECOS=========");
    
    for (int i = 5; i >= 2; i--) {
        int numeroPremiado = random.nextInt(10000); // Número entre 0000 y 9999
        int serie = random.nextInt(51) + 100; // Serie entre 100 y 150
        System.out.printf("Sorteo # %d - Número Premiado %04d - Serie %d%n", i, numeroPremiado, serie);
    }

    System.out.println("======Premio Mayor==========");
    
    int numeroPremiadoMayor = random.nextInt(10000); // Número entre 0000 y 9999
    int serieMayor = random.nextInt(51) + 100; // Serie entre 100 y 150
    System.out.printf("Sorteo # %d - Número Premiado %04d - Serie %d%n", 
                      1, numeroPremiadoMayor, serieMayor);
        
    } catch (Exception e) {
        
    }
    
}
   

  
       
}
